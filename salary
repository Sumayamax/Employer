
interface Payable {
    double getPaymentAmount();
}

abstract class Employee {
    protected String name;
    protected int id;
    protected double baseSalary;

    public Employee(String name, int id, double baseSalary) {
        this.name = name;
        this.id = id;
        this.baseSalary = baseSalary;
    }

    
    public abstract double calculateSalary();

    public void displayEmployeeInfo() {
        System.out.println("Employee ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Base Salary: " + baseSalary);
    }
}


class FullTimeEmployee extends Employee implements Payable {

    public FullTimeEmployee(String name, int id, double baseSalary) {
        super(name, id, baseSalary);
    }

    @Override
    public double calculateSalary() {
        return baseSalary * 1.2;
    }

   
    @Override
    public double getPaymentAmount() {
        return calculateSalary();
    }
}


class ContractEmployee extends Employee implements Payable {
    private double hourlyRate;
    private int hoursWorked;

    public ContractEmployee(String name, int id, double hourlyRate, int hoursWorked) {
        super(name, id, 0); 
        this.hourlyRate = hourlyRate;
        this.hoursWorked = hoursWorked;
    }

    @Override
    public double calculateSalary() {
        return hourlyRate * hoursWorked;
    }

    @Override
    public double getPaymentAmount() {
        return calculateSalary();
    }
}


public class Main {
    public static void main(String[] args) {
        FullTimeEmployee e1 = new FullTimeEmployee("Sumaya", 101, 5000);
        ContractEmployee e2 = new ContractEmployee("Adina", 102, 20, 160);

        e1.displayEmployeeInfo();
        System.out.println("Salary: " + e1.getPaymentAmount());
        System.out.println();

        e2.displayEmployeeInfo();
        System.out.println("Salary: " + e2.getPaymentAmount());
    }
}
