
interface Payable {
    double getPaymentAmount();
}


abstract class Employee {
    protected String name;
    protected int id;
    protected double baseSalary;

  
    public Employee(String name, int id, double baseSalary) {
        this.name = name;
        this.id = id;
        this.baseSalary = baseSalary;
    }

    
    public abstract double calculateSalary();

    
    public void EmployeeInfo() {
        System.out.println("Employee ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Base Salary: " + baseSalary);
    }
}

class TimeEmployee extends Employee implements Payable {

    public TimeEmployee(String name, int id, double baseSalary) {
        super(name, id, baseSalary);
    }

    
    @Override
    public double calculateSalary() {
        return baseSalary * 1.2;
    }

    
    @Override
    public double getPaymentAmount() {
        return calculateSalary();
    }
}

class ContractEmployee extends Employee implements Payable {
    private double hourRate;
    private int hoursWorked;

    public ContractEmployee(String name, int id, double hourRate, int hoursWorked) {
        super(name, id, 0); 
        this.hourRate = hourRate;
        this.hoursWorked = hoursWorked;
    }

    @Override
    public double calculateSalary() {
        return hourRate * hoursWorked;
    }

    @Override
    public double getPaymentAmount() {
        return calculateSalary();
    }
}

public class Main {
    public static void main(String[] args) {
        TimeEmployee e1 = new TimeEmployee("Alica", 101, 5000);
        ContractEmployee e2 = new ContractEmployee("Bob", 102, 20, 160);

        e1.EmployeeInfo();
        System.out.println("Salary: " + e1.getPaymentAmount());
        System.out.println();

        e2.EmployeeInfo();
        System.out.println("Salary: " + e2.getPaymentAmount());
    }
}
